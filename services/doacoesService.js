// services/doacoesService.js - VERS√ÉO FINAL SEM ERRO DE √çNDICE
import { 
  collection, 
  addDoc, 
  query, 
  where, 
  getDocs, 
  doc, 
  updateDoc,
  getDoc,
  Timestamp,
} from 'firebase/firestore';
import { db } from '../firebase/firebaseconfig';

// ============================================
// CRIAR/SALVAR DOA√á√ÉO
// ============================================

/**
 * Salvar nova doa√ß√£o (usado pelo FormularioDoacao)
 */
export const salvarDoacao = async (dadosDoacao) => {
  try {
    const doacaoRef = await addDoc(collection(db, 'doacoes'), {
      ...dadosDoacao,
      dataCriacao: Timestamp.now(),
      dataAtualizacao: Timestamp.now(),
    });
    
    console.log('‚úÖ Doa√ß√£o salva com ID:', doacaoRef.id);
    return { success: true, id: doacaoRef.id };
  } catch (error) {
    console.error('‚ùå Erro ao salvar doa√ß√£o:', error);
    return { success: false, error };
  }
};

/**
 * Criar doa√ß√£o (compatibilidade com c√≥digo antigo)
 */
export const criarDoacao = async (doacaoData) => {
  try {
    const docRef = await addDoc(collection(db, 'doacoes'), {
      ...doacaoData,
      status: doacaoData.status || 'pendente',
      dataDoacao: Timestamp.now(),
      dataColeta: null,
      dataCancelamento: null,
    });

    return docRef.id;
  } catch (error) {
    console.error('Erro ao criar doa√ß√£o:', error);
    throw error;
  }
};

// ============================================
// BUSCAR DOA√á√ïES (SEM ORDERBY - N√ÉO PRECISA √çNDICE)
// ============================================

/**
 * Buscar doa√ß√µes por institui√ß√£o
 */
export const buscarDoacoesPorInstituicao = async (instituicaoId) => {
  try {
    // REMOVIDO orderBy para n√£o precisar de √≠ndice
    const q = query(
      collection(db, 'doacoes'),
      where('instituicaoId', '==', instituicaoId)
    );
    
    const snapshot = await getDocs(q);
    const doacoes = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
    }));
    
    // ORDENAR NO CLIENTE (n√£o precisa de √≠ndice)
    doacoes.sort((a, b) => {
      const dateA = a.dataCriacao?.toDate?.() || new Date(a.dataCriacao || 0);
      const dateB = b.dataCriacao?.toDate?.() || new Date(b.dataCriacao || 0);
      return dateB - dateA; // Mais recente primeiro
    });
    
    console.log(`‚úÖ ${doacoes.length} doa√ß√µes encontradas para institui√ß√£o`);
    return doacoes;
  } catch (error) {
    console.error('‚ùå Erro ao buscar doa√ß√µes:', error);
    return [];
  }
};

/**
 * Buscar doa√ß√µes por institui√ß√£o com filtro de status
 */
export const buscarDoacoesInstituicao = async (instituicaoId, statusFiltro = null) => {
  try {
    let q;

    // REMOVIDO orderBy para n√£o precisar de √≠ndice
    if (statusFiltro) {
      q = query(
        collection(db, 'doacoes'),
        where('instituicaoId', '==', instituicaoId),
        where('status', '==', statusFiltro)
      );
    } else {
      q = query(
        collection(db, 'doacoes'),
        where('instituicaoId', '==', instituicaoId)
      );
    }

    const querySnapshot = await getDocs(q);
    const doacoes = [];

    querySnapshot.forEach((doc) => {
      doacoes.push({
        id: doc.id,
        ...doc.data(),
      });
    });

    // ORDENAR NO CLIENTE (n√£o precisa de √≠ndice)
    doacoes.sort((a, b) => {
      const dateA = a.dataCriacao?.toDate?.() || new Date(a.dataCriacao || 0);
      const dateB = b.dataCriacao?.toDate?.() || new Date(b.dataCriacao || 0);
      return dateB - dateA; // Mais recente primeiro
    });

    console.log(`‚úÖ ${doacoes.length} doa√ß√µes encontradas e ordenadas`);
    return doacoes;
  } catch (error) {
    console.error('Erro ao buscar doa√ß√µes:', error);
    return [];
  }
};

/**
 * Buscar doa√ß√µes recentes (√∫ltimas 10)
 */
export const buscarDoacoesRecentes = async (instituicaoId) => {
  try {
    // REMOVIDO orderBy e limit, vamos ordenar no cliente
    const q = query(
      collection(db, 'doacoes'),
      where('instituicaoId', '==', instituicaoId)
    );

    const querySnapshot = await getDocs(q);
    const doacoes = [];

    querySnapshot.forEach((doc) => {
      doacoes.push({
        id: doc.id,
        ...doc.data(),
      });
    });

    // ORDENAR NO CLIENTE e pegar s√≥ as 10 mais recentes
    doacoes.sort((a, b) => {
      const dateA = a.dataCriacao?.toDate?.() || new Date(a.dataCriacao || 0);
      const dateB = b.dataCriacao?.toDate?.() || new Date(b.dataCriacao || 0);
      return dateB - dateA;
    });

    // Retornar s√≥ as 10 primeiras
    const doacoesRecentes = doacoes.slice(0, 10);
    console.log(`‚úÖ ${doacoesRecentes.length} doa√ß√µes recentes encontradas`);
    return doacoesRecentes;
  } catch (error) {
    console.error('Erro ao buscar doa√ß√µes recentes:', error);
    return [];
  }
};

/**
 * Buscar doa√ß√µes do usu√°rio/doador
 */
export const buscarDoacoesPorDoador = async (doadorId) => {
  try {
    // REMOVIDO orderBy para n√£o precisar de √≠ndice
    const q = query(
      collection(db, 'doacoes'),
      where('doadorId', '==', doadorId)
    );
    
    const snapshot = await getDocs(q);
    const doacoes = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
    }));
    
    // ORDENAR NO CLIENTE (n√£o precisa de √≠ndice)
    doacoes.sort((a, b) => {
      const dateA = a.dataCriacao?.toDate?.() || new Date(a.dataCriacao || 0);
      const dateB = b.dataCriacao?.toDate?.() || new Date(b.dataCriacao || 0);
      return dateB - dateA; // Mais recente primeiro
    });
    
    console.log(`‚úÖ ${doacoes.length} doa√ß√µes do usu√°rio encontradas`);
    return doacoes;
  } catch (error) {
    console.error('‚ùå Erro ao buscar doa√ß√µes do usu√°rio:', error);
    return [];
  }
};

/**
 * Buscar minhas doa√ß√µes (compatibilidade)
 */
export const buscarMinhasDoacoes = async (doadorId) => {
  return buscarDoacoesPorDoador(doadorId);
};

// ============================================
// ATUALIZAR STATUS
// ============================================

/**
 * Confirmar recebimento da doa√ß√£o
 */
export const confirmarRecebimento = async (doacaoId) => {
  try {
    const doacaoRef = doc(db, 'doacoes', doacaoId);
    await updateDoc(doacaoRef, {
      status: 'recebida',
      dataRecebimento: Timestamp.now(),
      dataAtualizacao: Timestamp.now(),
    });
    
    console.log('‚úÖ Doa√ß√£o confirmada como recebida');
    return { success: true };
  } catch (error) {
    console.error('‚ùå Erro ao confirmar recebimento:', error);
    return { success: false, error };
  }
};

/**
 * Marcar doa√ß√£o como coletada (ONG coletou, aguarda confirma√ß√£o do usu√°rio)
 */
export const marcarComoColetado = async (doacaoId, instituicaoId) => {
  try {
    const doacaoRef = doc(db, 'doacoes', doacaoId);
    await updateDoc(doacaoRef, {
      status: 'aguardando_confirmacao_usuario', // üÜï Aguarda usu√°rio confirmar
      dataColeta: Timestamp.now(),
      dataAtualizacao: Timestamp.now(),
    });

    console.log('‚úÖ Doa√ß√£o marcada como coletada - aguardando confirma√ß√£o do usu√°rio');
    return { success: true };
  } catch (error) {
    console.error('‚ùå Erro ao marcar como coletado:', error);
    return { success: false, error };
  }
};

/**
 * üÜï Usu√°rio confirma que a ONG realmente coletou a doa√ß√£o
 */
export const confirmarColetaPeloUsuario = async (doacaoId, usuarioId) => {
  try {
    const doacaoRef = doc(db, 'doacoes', doacaoId);
    
    // Verificar se a doa√ß√£o pertence ao usu√°rio
    const doacaoDoc = await getDoc(doacaoRef);
    if (!doacaoDoc.exists()) {
      throw new Error('Doa√ß√£o n√£o encontrada');
    }
    
    const doacao = doacaoDoc.data();
    if (doacao.doadorId !== usuarioId) {
      throw new Error('Esta doa√ß√£o n√£o pertence a voc√™');
    }
    
    if (doacao.status !== 'aguardando_confirmacao_usuario') {
      throw new Error('Esta doa√ß√£o n√£o est√° aguardando confirma√ß√£o');
    }
    
    // Confirmar coleta
    await updateDoc(doacaoRef, {
      status: 'recebida',
      dataConfirmacaoUsuario: Timestamp.now(),
      dataRecebimento: Timestamp.now(),
      dataAtualizacao: Timestamp.now(),
    });
    
    console.log('‚úÖ Usu√°rio confirmou que a doa√ß√£o foi coletada');
    return { success: true };
  } catch (error) {
    console.error('‚ùå Erro ao confirmar coleta:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Atualizar status da doa√ß√£o
 */
export const atualizarStatusDoacao = async (doacaoId, novoStatus) => {
  try {
    const doacaoRef = doc(db, 'doacoes', doacaoId);
    await updateDoc(doacaoRef, {
      status: novoStatus,
      dataAtualizacao: Timestamp.now(),
    });
    
    console.log('‚úÖ Status da doa√ß√£o atualizado');
    return { success: true };
  } catch (error) {
    console.error('‚ùå Erro ao atualizar status:', error);
    return { success: false, error };
  }
};

/**
 * Cancelar doa√ß√£o
 */
export const cancelarDoacao = async (doacaoId, instituicaoId = null, motivo = '') => {
  try {
    const doacaoRef = doc(db, 'doacoes', doacaoId);
    await updateDoc(doacaoRef, {
      status: 'cancelada',
      motivoCancelamento: motivo,
      dataCancelamento: Timestamp.now(),
      dataAtualizacao: Timestamp.now(),
    });
    
    console.log('‚úÖ Doa√ß√£o cancelada');
    return { success: true };
  } catch (error) {
    console.error('‚ùå Erro ao cancelar doa√ß√£o:', error);
    return { success: false, error };
  }
};

// ============================================
// DETALHES
// ============================================

/**
 * Buscar detalhes de uma doa√ß√£o
 */
export const buscarDetalhesDoacao = async (doacaoId) => {
  try {
    const doacaoRef = doc(db, 'doacoes', doacaoId);
    const doacaoDoc = await getDoc(doacaoRef);

    if (doacaoDoc.exists()) {
      return {
        id: doacaoDoc.id,
        ...doacaoDoc.data(),
      };
    }

    return null;
  } catch (error) {
    console.error('Erro ao buscar detalhes da doa√ß√£o:', error);
    return null;
  }
};

// ============================================
// ESTAT√çSTICAS
// ============================================

/**
 * Buscar estat√≠sticas das doa√ß√µes
 */
export const buscarEstatisticasDoacoes = async (instituicaoId) => {
  try {
    const doacoes = await buscarDoacoesPorInstituicao(instituicaoId);
    
    const stats = {
      total: doacoes.length,
      pendentes: doacoes.filter(d => d.status === 'pendente').length,
      aguardando: doacoes.filter(d => d.status === 'aguardando_confirmacao').length,
      recebidas: doacoes.filter(d => d.status === 'recebida').length,
      canceladas: doacoes.filter(d => d.status === 'cancelada').length,
    };

    // Doa√ß√µes deste m√™s
    const mesAtual = new Date().getMonth();
    const anoAtual = new Date().getFullYear();
    
    stats.mesAtual = doacoes.filter(d => {
      if (!d.dataCriacao) return false;
      const data = d.dataCriacao.toDate ? d.dataCriacao.toDate() : new Date(d.dataCriacao);
      return data.getMonth() === mesAtual && data.getFullYear() === anoAtual;
    }).length;

    return stats;
  } catch (error) {
    console.error('Erro ao buscar estat√≠sticas:', error);
    return {
      total: 0,
      pendentes: 0,
      aguardando: 0,
      recebidas: 0,
      canceladas: 0,
      mesAtual: 0,
    };
  }
};